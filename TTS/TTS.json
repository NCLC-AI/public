{
  "createdAt": "2025-07-16T10:55:14.324Z",
  "updatedAt": "2025-07-21T14:58:10.000Z",
  "id": "O7ugdmwlZzYMPMzS",
  "name": "TTS",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        208,
        176
      ],
      "id": "fefba0fe-89bf-41cd-92c1-3771b993a491",
      "name": "When chat message received",
      "webhookId": "0394d4a6-9d3b-40eb-bd08-1f1fcc9888b6"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a professional scriptwriter specialized in creating scripts for TTS (Text-to-Speech) automation systems. Your task is to generate realistic, engaging scripts with diverse characters of different ages, genders, and emotional contexts.\n\nRequirements:\n1. Create natural, conversational dialogue\n2. Include diverse character demographics (age, gender, personality)\n3. Incorporate various emotional tones and contexts\n4. Ensure dialogue flows naturally between characters\n5. Make content suitable for TTS voice synthesis\n6. Keep individual dialogue segments appropriately sized for TTS processing\n7. Create realistic character interactions and conversations\n\nCharacter Guidelines:\n- Assign appropriate speaking patterns based on age and personality\n- Include emotional context that would affect voice tone\n- Create distinct personality traits for each character\n- Ensure age-appropriate language and expressions\n\nOutput the script in the specified JSON format with actors array and dialogs array.\n\nCONSTRAINTS:\n- Answer in 한국어\n- 1분 분량"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        432,
        176
      ],
      "id": "42dcb376-9aed-4a80-a16d-eda3a68c9d2a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        464,
        400
      ],
      "id": "98fe6849-830f-4fe8-9296-ab8b536ba036",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "wCp1s5K88PESNvOR",
          "name": "ZDefault"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://example.com/tts-script.schema.json\",\n  \"title\": \"TTS Script\",\n  \"description\": \"A script format for TTS automation with character information and dialogue\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"actors\": {\n      \"description\": \"Array of actors/characters in the script\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"description\": \"The name of the actor/character\",\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"description\": \"Detailed description of the character including age, gender, personality, and TTS voice characteristics\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\"name\", \"description\"]\n      }\n    },\n    \"dialogs\": {\n      \"description\": \"Array of dialogue entries in chronological order\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"actor\": {\n            \"description\": \"The name of the actor speaking this dialogue\",\n            \"type\": \"string\"\n          },\n          \"dialog\": {\n            \"description\": \"The actual dialogue text to be spoken\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\"actor\", \"dialog\"]\n      }\n    }\n  },\n  \"required\": [\"actors\", \"dialogs\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        592,
        400
      ],
      "id": "8c7a1f0f-8527-4ab6-b656-4e922533d1e3",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.actors",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        832,
        64
      ],
      "id": "29755f3b-26d5-42bb-b946-df2eae6b9c70",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "cU7iWn8XX85N2zDE",
          "mode": "list",
          "cachedResultName": "My project — generate voice"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $json.name }}",
            "description": "={{ $json.description }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1056,
        64
      ],
      "id": "8ffc209d-9b92-40c7-acd6-a7da7b030b2e",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1728,
        176
      ],
      "id": "5143299a-fc92-4a60-9aa0-d75ef692e8a3",
      "name": "Merge"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "voice_id"
            },
            {
              "fieldToAggregate": "name"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1280,
        64
      ],
      "id": "5a2b8915-712e-4cea-ae8d-7a1c91e93070",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "188e091b-1a17-4def-af23-f122510a1987",
              "name": "voices",
              "value": "={{ Object.fromEntries($json.name.map((name, index) => [name, $json.voice_id[index]])) }}",
              "type": "array"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1504,
        64
      ],
      "id": "c0df6efb-04e1-4edb-8afe-490572b2efb3",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.dialogs",
        "include": "selectedOtherFields",
        "fieldsToInclude": "voices",
        "options": {
          "destinationFieldName": "dialogs"
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1952,
        176
      ],
      "id": "2ebc50bf-8a61-481a-8a1c-83f322822a96",
      "name": "Split Out"
    },
    {
      "parameters": {
        "batchSize": 3,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2176,
        176
      ],
      "id": "b4630b9f-857f-470d-a411-ce516d2d6773",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "resource": "speech",
        "voice": {
          "__rl": true,
          "value": "={{ $json.voices[$json.dialogs.actor] }}",
          "mode": "id"
        },
        "text": "={{ $json.dialogs.dialog }}",
        "additionalOptions": {},
        "requestOptions": {}
      },
      "type": "@elevenlabs/n8n-nodes-elevenlabs.elevenLabs",
      "typeVersion": 1,
      "position": [
        2400,
        224
      ],
      "id": "171d8321-b35a-4614-a3e8-389d01e1ddae",
      "name": "Convert text to speech",
      "credentials": {
        "elevenLabsApi": {
          "id": "qqsx2PWiSvLYh2sO",
          "name": "ElevenLabs account nocodeai.jimmy"
        }
      }
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2400,
        32
      ],
      "id": "e52fa9c6-8b50-422d-8f5c-c4241aeefcfc",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "audio",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2848,
        32
      ],
      "id": "d839c57b-f58c-416b-a855-1b6d14fd95f5",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "const audios = $input.all().map((item) => item.json.data);\n\nfunction findMP3DataStart(buffer) {\n  if (buffer.toString(\"ascii\", 0, 3) === \"ID3\") {\n    const size =\n      ((buffer[6] & 0x7f) << 21) |\n      ((buffer[7] & 0x7f) << 14) |\n      ((buffer[8] & 0x7f) << 7) |\n      (buffer[9] & 0x7f);\n    return 10 + size;\n  }\n\n  for (let i = 0; i < buffer.length - 1; i++) {\n    if (buffer[i] === 0xff && (buffer[i + 1] & 0xe0) === 0xe0) {\n      return i;\n    }\n  }\n\n  throw new Error(\"No MP3 data found\");\n}\n\nconst combinedAudio = audios.reduce((combined, audio) => {\n  const buffer = Buffer.from(audio, \"base64\");\n  const start = findMP3DataStart(buffer);\n  return Buffer.concat([combined, buffer.slice(start)]);\n}, Buffer.alloc(0));\n\nreturn { audio: combinedAudio.toString(\"base64\") };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2624,
        32
      ],
      "id": "cc7cc7e9-8bef-4189-accd-e98e9ffbca62",
      "name": "Code"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert text to speech",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert text to speech": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "3cbe343b-21c5-43f2-8fbd-a3a3585b15ce",
  "triggerCount": 0,
  "tags": [
    {
      "createdAt": "2025-07-21T14:57:56.498Z",
      "updatedAt": "2025-07-21T14:57:56.498Z",
      "id": "OSprPbYtDkc7lq7v",
      "name": "TTS"
    }
  ]
}